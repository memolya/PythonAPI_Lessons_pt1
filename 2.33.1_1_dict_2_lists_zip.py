# keys, values = input().split(), input().split()
#
# # Создаём словарь с помощью zip
# #Функция zip() берёт элементы из keys и values по очереди и объединяет их в пары.
# # dict(zip(keys, values)) Преобразует пары из zip в словарь
# dct = dict(zip(keys, values))
#
# # Выводим содержимое словаря
# for key, value in dct.items():
#     print(f'{key} - {value}')

keys, values = input().split(), input().split()

for key, value in zip(keys, values):
    print(f"{key} - {value}")

# Результат zip() — это итератор, а не список или кортеж. Чтобы увидеть его содержимое, нужно преобразовать его, например, с помощью list() или tuple().
# Обработка объектов разной длины:
#
# Если объекты имеют разную длину, результат будет обрезан до длины самого короткого объекта.
# Неизменяемый порядок:
#
# Пары формируются в порядке появления элементов в исходных итерируемых объектах.
# Применение с dict() и циклами:
#
# Удобен для создания словарей или обработки данных в циклах.


# Если итерируемые объекты имеют разные длины, то элементы длинных объектов, выходящие за пределы самой короткой длины, будут проигнорированы.
# Для сохранения всех данных можно использовать itertools.zip_longest() из стандартной библиотеки itertools.
#
# Альтернатива: itertools.zip_longest
#
# from itertools import zip_longest
#
# a = [1, 2, 3]
# b = ['x', 'y']
#
# result = zip_longest(a, b, fillvalue=None)
# print(list(result))

# Результат:

# [(1, 'x'), (2, 'y'), (3, None)]
